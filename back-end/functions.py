# imports
import sys, json
from pandas.io.json import json_normalize
import tweepy
import numpy as np
import pandas as pd
import re
from textblob import TextBlob

# twitter credentials and init
auth = tweepy.OAuthHandler(CREDENTIALS)
auth.set_access_token(ACCESS_TOKEN)
api = tweepy.API(auth)

def read_in():
    """ 
    Returns JSON sent by mongoDB backend 
    """
    lines = sys.stdin.readlines()
    
    return json.loads(lines[0])


def generate_df(lines):    
    """
    Returns pandas dataframe of user activity from JSON input
    
    JSON is from mongoDB backend and 'days' is the key where user input for each days of
    activity is stored. The dataframe is used for correlations and generating an interactive chart
    """
 
    # data to DF for plots and correlations
    df = json_normalize(lines['days'])
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values(by='date')

    return df

def tweets_df(lines, quantity=200):
    """
    Returns pandas dataframe with a user's tweets, cleaned tweets, and the day they were made
    
    Reads JSON to get a username, then makes an api called to twitter, pulls tweets for the user
    specified, and creates a dataframe, then cleans the tweets for use in sentiment analysis
    """
    
    def clean_tweet(tweet):
        """
        Returns string without links or special characters using regex
        """
        
        return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
    
    # get username
    data = json_normalize(lines)
    username = data['twitter'][0]

    # get tweets and set to dataframe
    tweets = api.user_timeline(screen_name=username, count=quantity)
    tweet_df = pd.DataFrame(data=[tweet.text for tweet in tweets], columns=['tweets'])
    
    # add date column
    creation_date = pd.to_datetime([tweet.created_at for tweet in tweets])
    tweet_df['date'] = creation_date.date
    
    # create a column for the cleaned tweets
    clean_tweets = []
    for tweet in tweet_df['tweets']:
        clean_tweets.append(clean_tweet(tweet))

    tweet_df['clean'] = clean_tweets

    return tweet_df

def get_sentiment(tweets):
    """
    Returns a list of of sentiments, generated by TextBlob, for tweets at correspending indices 
    """
    tweet_sentiment = []

    for tweet in tweets:
        analysis = TextBlob(clean_tweet(tweet))
        if analysis.sentiment.polarity > 0:
            tweet_sentiment.append(1)
        elif analysis.sentiment.polarity == 0:
            tweet_sentiment.append(0)
        else:
            tweet_sentiment.append(-1)
    
    return tweet_sentiment


def caption_sentiment(most_recent_sentiment):
    """
    Returns string based on average sentiment for the most recent day for use in generating plotly graph captions
    """
    tweet_cap = 'nothing to analyze'
    
    if day_sentiment == 0:
        tweet_cap = '<b><span style="color: #38A1F3">Your tweets are neutral today</span></b>'
    elif day_sentiment > 0:
        tweet_cap = '<b><span style="color: #38A1F3">Your tweets are postive today</span></b>'
    elif day_sentiment < 0:
        tweet_cap = '<b><span style="color: #38A1F3">Your tweets are negative today</span></b>'
    else:
        tweet_cap = '<b><span style="color: #38A1F3">You have no tweets to analyze today</span></b>'
    
    return tweet_cap

def graph_captions(correlation_list, tweet_cap):
    """
    Returns a dictionary of the final captions for plotly graphs, based on correlations and tweet
    sentiment
    """
    caption_dict = {}
    correlation_dict = {}
    for i in correlation_list:
        correlation_dict[i] = df_plot['mood'].corr(df_plot[i])
    
    for i in correlation_list:
        if correlation_dict[i] >= .7:
            action = 'increase'
        elif correlation_dict[i] >= .5:
            action = 'increase moderately'
        elif correlation_dict[i] >= .3:
            action = 'increase a little'
        elif correlation_dict[i] <= -.3 and correlation_dict[correlation_list[i]] > -.5:
            action = 'decrease a little'
        elif correlation_dict[i] <= -.5 and correlation_dict[correlation_list[i]] > -.7:
            action = 'decrease moderately'
        elif correlation_dict[i] < -.7:
            action = 'decrease'
        else:
            caption_dict[i] = (
                tweet_cap + 
                '<br>There is no relationship between <b><span style="color: #009900">' + 
                str(correlation_list[i]) + 
                '</span></b> and your <span style="color: #FF4099">mood</span>')
            break
        
        caption_dict[i] = (
            tweet_cap + 
            '<br>As your <b><span style="color: #009900">' +
            str(correlation_list[i]) + 
            f'</span></b> goes up, your <span style="color: #FF4099">mood</span> tends to <b> {action} </b>')
                                            
    return caption_dict
    
    
    
